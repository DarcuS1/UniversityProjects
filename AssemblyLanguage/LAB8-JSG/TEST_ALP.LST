Turbo Assembler	 Version 3.0	    04/06/22 15:58:22	    Page 1
test_alp.asm



      1				     IF	1					     ;includes a previously created
      2					     INCLUDE C:\TASM\MLAB.MAC		     ;macro library
1     3				     DELETE MACRO
1     4				     push ax
1     5				     push bx
1     6				     push cx
1     7				     push dx
1     8				     push es
1     9				     push bp
1    10				     mov AX, SEGDATA
1    11				     mov ES, AX
1    12				     mov AX, offset tamp
1    13				     mov BP, AX
1    14				     mov AH, 13h
1    15				     mov AL, 01h
1    16				     mov BL, 07h
1    17				      mov CX, 07D0h
1    18				     mov DX, 0000h
1    19				     int 10h
1    20				     pop bp
1    21				     pop es
1    22				     pop dx
1    23				     pop cx
1    24				      pop bx
1    25				     pop ax
1    26				     ENDM
1    27
1    28				     CURSOR MACRO
1    29				     POS push ax
1    30				      push bx
1    31				     push dx
1    32				     push di
1    33				     push si
1    34				     push bp
1    35				     mov DX, POS
1    36				     mov AH, 02h
1    37				      mov BH, 00h
1    38				     int 10h
1    39				     pop bp
1    40				     pop si
1    41				     pop di
1    42				     pop dx
1    43				     pop bx
1    44				     pop ax
1    45				     ENDM
1    46
1    47
1    48				     CURSOR MACRO POS
1    49				     push ax
1    50				     push bx
1    51				      push dx
1    52				     push di
1    53				     push si
1    54				     push bp
1    55				     mov DX, POS
1    56				     mov AH, 02h
1    57				      mov BH, 00h
Turbo Assembler	 Version 3.0	    04/06/22 15:58:22	    Page 2
test_alp.asm



1    58				     int 10h
1    59				     pop bp
1    60				     pop si
1    61				     pop di
1    62				     pop dx
1    63				     pop bx
1    64				      pop ax
1    65				      ENDM
1    66
1    67				     TYPECAR MACRO MES
1    68				     push ax
1    69				     push dx
1    70				     mov AH, 09h
1    71				     mov DX, offset MES
1    72				     int 21h
1    73				     pop dx
1    74				     pop ax
1    75				      ENDM
1    76
1    77				     TYPENUM MACRO
1    78				     push AX
1    79				     push DX
1    80				     mov DX, AX
1    81				     add DL, '0'
1    82				      mov AH, 02h
1    83				     int 21h
1    84				     pop DX
1    85				     pop AX
1    86				     ENDM
1    87
1    88
1    89				     INTIR MACRO TIME
1    90				     LOCAL P1, P2 ;;p1 and p2 are local	labels
1    91				     PUSH DX ;;saves dx	and cx registers
1    92				     PUSH CX
1    93				     MOV DX, TIME ;; loads a delay in dx
1    94				     P1: MOV CX, 0FF00H;;loads cx with 0FF00h
1    95				     ;;counts
1    96				     P2: DEC CX	;;delays by decrementing cx
1    97				     JNZ P2 ;;if cx!=0 continue
1    98				     DEC DX ;;if cx=0 decrements dx
1    99				     JNZ P1 ;;if dx!=0 loads again cx
1   100				     POP CX ;;if dx=0 remake cx	and dx
1   101				     POP DX ;;
1   102				     ENDM ;;end	macro
    103					     INCLUDE C:\TASM\BIBLIO.LIB
1   104				     INTIRP MACRO
1   105
1   106				     ;LOCAL S1,	S2 ;;p1	and p2 are local labels
1   107				     PUSH DX ;;saves dx	and cx registers
1   108				     PUSH CX
1   109				     MOV DX, AX	;; loads a delay in dx
1   110				     S1: MOV CX, 0FF00H;;loads cx with 0FF00h
1   111				     ;;counts
1   112				     S2: DEC CX	;;delays by decrementing cx
1   113				     JNZ S2 ;;if cx!=0 continue
1   114				     DEC DX ;;if cx=0 decrements dx
Turbo Assembler	 Version 3.0	    04/06/22 15:58:22	    Page 3
test_alp.asm



1   115				     JNZ S1 ;;if dx!=0 loads again cx
1   116				     POP CX ;;if dx=0 remake cx	and dx
1   117				     POP DX ;;
1   118
1   119				     ENDM
    120										     ;available	on				    +
    121				     ftp.utcluj.ro/pub/users/cemil/asm/labs
    122				     ENDIF
    123
    124	0000			     STCK SEGMENT PARA 'STACK'			     ;defines a	stack segment
    125	0000  40*(53 54	41 43 4B)     DB 64 DUP	('STACK')
    126	0140			     STCK ENDS
    127
    128	0000			     SEGDATA SEGMENT PARA 'DATA'		     ;data segment definition
    129	0000  49 20 61 6D 20 61	20+	     MESSAGE DB	'I am a	simple counting	program$'
    130	      73 69 6D 70 6C 65	20+
    131	      63 6F 75 6E 74 69	6E+
    132	      67 20 70 72 6F 67	72+
    133	      61 6D 24
    134	001F  07D0*(20)			     TAMP DB 2000 DUP (' ')
    135	07EF			     SEGDATA ENDS
    136
    137	0000			     COD1 SEGMENT PARA 'CODE'			     ;code segment definition
    138	0000			     MYPROC PROC FAR				     ;procedure	with myproc name
    139				     ASSUME CS:COD1, DS:SEGDATA, SS:STCK
    140	0000  1E			     PUSH DS				     ;saves ds
    141	0001  2B C0			     SUB AX, AX				     ;0	in ax
    142	0003  50			     PUSH AX				     ;0	on the stack
    143	0004  B8 0000s			     MOV AX, SEGDATA			     ;adr segdata in ax
    144	0007  8E D8			     MOV DS, AX				     ;adr segdata in ds
    145
    146					     DELETE				     ;clear screen macro call
1   147	0009  50		     push ax
1   148	000A  53		     push bx
1   149	000B  51		     push cx
1   150	000C  52		     push dx
1   151	000D  06		     push es
1   152	000E  55		     push bp
1   153	000F  B8 0000s		     mov AX, SEGDATA
1   154	0012  8E C0		     mov ES, AX
1   155	0014  B8 001Fr		     mov AX, offset tamp
1   156	0017  8B E8		     mov BP, AX
1   157	0019  B4 13		     mov AH, 13h
1   158	001B  B0 01		     mov AL, 01h
1   159	001D  B3 07		     mov BL, 07h
1   160	001F  B9 07D0		      mov CX, 07D0h
1   161	0022  BA 0000		     mov DX, 0000h
1   162	0025  CD 10		     int 10h
1   163	0027  5D		     pop bp
1   164	0028  07		     pop es
1   165	0029  5A		     pop dx
1   166	002A  59		     pop cx
1   167	002B  5B		      pop bx
1   168	002C  58		     pop ax
    169					     CURSOR 0019H			     ;pos cursor macro call
1   170	002D  50		     push ax
1   171	002E  53		     push bx
Turbo Assembler	 Version 3.0	    04/06/22 15:58:22	    Page 4
test_alp.asm



1   172	002F  52		      push dx
1   173	0030  57		     push di
1   174	0031  56		     push si
1   175	0032  55		     push bp
1   176	0033  BA 0019		     mov DX, 0019H
1   177	0036  B4 02		     mov AH, 02h
1   178	0038  B7 00		      mov BH, 00h
1   179	003A  CD 10		     int 10h
1   180	003C  5D		     pop bp
1   181	003D  5E		     pop si
1   182	003E  5F		     pop di
1   183	003F  5A		     pop dx
1   184	0040  5B		     pop bx
1   185	0041  58		      pop ax
    186					     TYPECAR MESSAGE			     ;message type macro call
1   187	0042  50		     push ax
1   188	0043  52		     push dx
1   189	0044  B4 09		     mov AH, 09h
1   190	0046  BA 0000r		     mov DX, offset MESSAGE
1   191	0049  CD 21		     int 21h
1   192	004B  5A		     pop dx
1   193	004C  58		     pop ax
    194	004D  B8 0000			     MOV AX, 00H			     ;0	in ax for counting
    195
    196	0050			     REPEAT: CURSOR 0C28H			     ;in middle	of the screen
1   197	0050  50		     push ax
1   198	0051  53		     push bx
1   199	0052  52		      push dx
1   200	0053  57		     push di
1   201	0054  56		     push si
1   202	0055  55		     push bp
1   203	0056  BA 0C28		     mov DX, 0C28H
1   204	0059  B4 02		     mov AH, 02h
1   205	005B  B7 00		      mov BH, 00h
1   206	005D  CD 10		     int 10h
1   207	005F  5D		     pop bp
1   208	0060  5E		     pop si
1   209	0061  5F		     pop di
1   210	0062  5A		     pop dx
1   211	0063  5B		     pop bx
1   212	0064  58		      pop ax
    213					     TYPENUM			     ;number type macro	call
1   214	0065  50		     push AX
1   215	0066  52		     push DX
1   216	0067  8B D0		     mov DX, AX
1   217	0069  80 C2 30		     add DL, '0'
1   218	006C  B4 02		      mov AH, 02h
1   219	006E  CD 21		     int 21h
1   220	0070  5A		     pop DX
1   221	0071  58		     pop AX
    222
    223	0072  50			     PUSH AX
    224	0073  B8 03E8			     MOV AX, 1000
    225					     INTIRP
1   226
1   227				     ;LOCAL S1,	S2 ;
1   228	0076  52		     PUSH DX ;
Turbo Assembler	 Version 3.0	    04/06/22 15:58:22	    Page 5
test_alp.asm



1   229	0077  51		     PUSH CX
1   230	0078  8B D0		     MOV DX, AX	;
1   231	007A  B9 FF00		     S1: MOV CX, 0FF00H;
1   232	007D  49		     S2: DEC CX	;
1   233	007E  75 FD		     JNZ S2 ;
1   234	0080  4A		     DEC DX ;
1   235	0081  75 F7		     JNZ S1 ;
1   236	0083  59		     POP CX ;
1   237	0084  5A		     POP DX ;
1   238
    239	0085  58			     POP AX		     ;delay macro call
    240	0086  04 01			     ADD AL, 01H			     ;increment	al
    241	0088  27			     DAA				     ;decimal adjustment
    242	0089  3C 50			     CMP AL, 50H			     ;test final
    243	008B  74 02			     JE	SFIR				     ;after 9 executions
    244	008D  EB C1			     JMP REPEAT				     ;else repeat
    245
    246	008F			     SFIR:   DELETE				     ;clear screen macro call
1   247	008F  50		     push ax
1   248	0090  53		     push bx
1   249	0091  51		     push cx
1   250	0092  52		     push dx
1   251	0093  06		     push es
1   252	0094  55		     push bp
1   253	0095  B8 0000s		     mov AX, SEGDATA
1   254	0098  8E C0		     mov ES, AX
1   255	009A  B8 001Fr		     mov AX, offset tamp
1   256	009D  8B E8		     mov BP, AX
1   257	009F  B4 13		     mov AH, 13h
1   258	00A1  B0 01		     mov AL, 01h
1   259	00A3  B3 07		     mov BL, 07h
1   260	00A5  B9 07D0		      mov CX, 07D0h
1   261	00A8  BA 0000		     mov DX, 0000h
1   262	00AB  CD 10		     int 10h
1   263	00AD  5D		     pop bp
1   264	00AE  07		     pop es
1   265	00AF  5A		     pop dx
1   266	00B0  59		     pop cx
1   267	00B1  5B		      pop bx
1   268	00B2  58		     pop ax
    269	00B3  CB			     RET				     ;back to dos
    270
    271	00B4			     MYPROC ENDP				     ;end procedure
    272	00B4			     COD1 ENDS					     ;end segment
    273				     END MYPROC					     ;end program
Turbo Assembler	 Version 3.0	    04/06/22 15:58:22	    Page 6
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "04/06/22"
??FILENAME			  Text	 "test_alp"
??TIME				  Text	 "15:58:22"
??VERSION			  Number 0300
@CPU				  Text	 0101H
@CURSEG				  Text	 COD1
@FILENAME			  Text	 TEST_ALP
@WORDSIZE			  Text	 2
MESSAGE				  Byte	 SEGDATA:0000
MYPROC				  Far	 COD1:0000
REPEAT				  Near	 COD1:0050
S1				  Near	 COD1:007A
S2				  Near	 COD1:007D
SFIR				  Near	 COD1:008F
TAMP				  Byte	 SEGDATA:001F

Macro Name

CURSOR
DELETE
INTIR
INTIRP
TYPECAR
TYPENUM

Groups & Segments		  Bit Size Align  Combine Class

COD1				  16  00B4 Para	  none	  CODE
SEGDATA				  16  07EF Para	  none	  DATA
STCK				  16  0140 Para	  none	  STACK
